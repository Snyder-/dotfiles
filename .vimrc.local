if filereadable(expand("~/.vimoptions.local"))
  source ~/.vimoptions.local
endif

call plug#begin('~/.vim/plugged')

Plug 'Ecomba/Vim-Ruby-Refactoring'
Plug 'Ggreer/The_silver_searcher'
Plug 'SirVer/ultisnips'
Plug 'altercation/vim-colors-solarized'
Plug 'christoomey/vim-sort-motion'
Plug 'christoomey/vim-system-copy'
Plug 'christoomey/vim-tmux-navigator'
Plug 'christoomey/vim-tmux-runner'
Plug 'craigemery/vim-autotag'
Plug 'honza/vim-snippets'
Plug 'kana/vim-textobj-entire'
Plug 'kana/vim-textobj-indent'
Plug 'kana/vim-textobj-line'
Plug 'kana/vim-textobj-user'
Plug 'kien/ctrlp.vim'
Plug 'nelstrom/vim-textobj-rubyblock'
Plug 'rizzatti/dash.vim'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/syntastic'
Plug 'skalnik/vim-vroom'
Plug 'thoughtbot/vim-rspec'
Plug 'tmhedberg/matchit'
Plug 'tommcdo/vim-exchange'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-ragtag'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'vim-airline/vim-airline'
Plug 'vim-ruby/vim-ruby'
Plug 'vim-scripts/ReplaceWithRegister'
Plug 'whatyouhide/vim-textobj-erb'
call plug#end()

" Set Relative Numbering
set relativenumber

" Vim-Airline - Integrate with fonts
let g:solarized_termcolors=256
set background=light
colorscheme solarized
set t_Co=16
syntax enable

" Set Search Highlighting Colors
"set hlsearch
"hi Search cterm=NONE ctermfg=grey ctermbg=blue

set guifont=Anonymice\ Powerline:h20
let g:airline_powerline_fonts = 1

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

" airline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''

" Set vim-unimpaired defaults
set cursorline cursorcolumn "toggle cox
set nonumber "toggle con
" User Ack instead of grep
set grepprg=ack
nnoremap fn :cn<cr>
nnoremap fp :cp<cr>
" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =
" zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

" Vim-Nerdtree mappings
nnoremap <Leader>d :NERDTreeToggle<CR>


" Vim-Tmux-Runner mappings
map      <leader>sl  :VtrSendLinesToRunner!<cr>
nnoremap <leader>va  :VtrAttachToPane <cr>
map      <leader>q   :VtrKillRunner<cr>
nmap     <leader>rf  :VtrSendFile!<cr>
map      <leader>irb :VtrOpenRunner { 'orientation': 'h', 'cmd': 'irb', 'percentage': '50'}<cr>
nmap     <leader>ir  :VtrSendCommand! irb<cr>
map      <leader>sd  :VtrSendCtrlD<cr>
nmap     <leader>fr  :VtrFocusRunner<cr>

" turn off creating undo edit files
set noundofile

" Vim-Rspec mappings
let g:rspec_command = "VtrSendCommand! rspec {spec}"
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<cr>
map <Leader>tf :call RunCurrentSpecFileAndFocus()<CR>
map <Leader>sf :call RunNearestSpecAndFocus()<CR>
map <Leader>lf :call RunLastSpecAndFocus()<CR>
map <Leader>af :call RunAllTestAndFocus()<cr>

fun! RunCurrentSpecFileAndFocus()
  call RunCurrentSpecFile()
  :VtrFocusRunner
endfun

fun! RunNearestSpecAndFocus()
  call RunNearestSpec()
  :VtrFocusRunner
endfun

fun! RunLastSpecAndFocus()
  call RunLastSpec()
  :VtrFocusRunner
endfun

fun! RunAllTestAndFocus()
  call RunAllSpecs()
  :VtrFocusRunner
endfun


" Quick Access Vimrc and Tmux
map <Leader>vi :tabedit ~/.vimrc.local<CR>
map <Leader>vz :tabedit ~/.oh-my-zsh/themes/snyder.zsh-theme<CR>
map <Leader>sv :source ~/.vimrc.local<CR>
" Source tmux with <ctr-s>r
map <Leader>vt :tabedit ~/.tmux.conf.local<CR>
map <Leader>vb :tabedit ~/.bash_profile<cr>
map <Leader>sb :source ~/.bash_profile<cr>


augroup rubypath
  autocmd!

  " Allow GF to try and add suffix to filename
  autocmd FileType ruby setlocal suffixesadd+=.rb
  autocmd FileType eruby let g:UltiSnipsAddFiletypes="html"
augroup END

" Reload chrome after every save to web files
" Uses chrome-cli, brew install chrome-cli
" augroup html
"   autocmd!
"   autocmd BufWritePost *.html call ReloadChrome()
"   autocmd BufWritePost *.md call ReloadChrome()
"   autocmd BufWritePost *.erb call ReloadChrome()
"   autocmd BufWritePost *.css call ReloadChrome()
"   autocmd BufWritePost *.scss call ReloadChrome()
"   "Assume sass is being precompiled and will be slow to compile
"   autocmd BufWritePost *.sass call Wait()|call ReloadChrome()
"   autocmd BufWritePost *.js call ReloadChrome()
"   fun! ReloadChrome()
"     silent !chrome-cli reload
"   endfun
"   fun! Wait()
"     sleep 1500m
"   endfun
" augroup END

"Open current file in browser
" nmap <Leader>o :call OpenCurrentFileInChrome(expand('%:p:h'), expand('%'))<CR>
" fun! OpenCurrentFileInChrome(path, filename)
"   execute 'silent !chrome-cli open file://' . a:path . '/' . a:filename
"   call ReDraw()
" endfun
" fun! ReDraw()
"   redraw!
" endfun

" Move/transpose lines up and down
nmap <Leader>k [e
nmap <Leader>j ]e
vmap <Leader>k [egv
vmap <Leader>j ]egv

" Vim-ruby-refactoring mappings
nnoremap <leader>arg    :RAddParameter<cr>
vnoremap <leader>def    :RExtractMethod<cr>
nnoremap <leader>pc     :RConvertPostConditional<cr>
nnoremap <leader>el     :RExtractLet<cr>

" Set ultisnips triggers
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" Dash integration
" search docs for word under cursor
nmap <silent> <leader>m <Plug>DashGlobalSearch

" map <F3> :echo 'Current time is ' . strftime('%c')<CR>

" Substitute under cursor
nnoremap <Leader>cw :%s/\<<C-r><C-w>\>//gc<Left><Left><Left>

" Vim-ReplaceWithRegister - Replace with Global copy
nmap <leader>gr "*gr

" Vim-Textobj mappings
let g:textobj_ruby_more_mappings=1

" Vim-Syntastic mappings
nmap <leader>rubo :SyntasticToggleMode<cr>
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_ruby_checkers = ['rubocop']

" Vim-dispatch mappings
nmap <leader>gs :Gstatus<cr>
nmap <leader>gc :Gcommit<cr>
nmap <leader>gb :Gblame<cr>
nmap <leader>gd :Gdiff<cr>
nmap <leader>rs :Rake spec<cr>
nmap <leader>rr :Rrunner<cr>

" Normal remappings
imap jj <esc>
imap <C-c> <esc>:w<cr>
nmap <C-c> <esc>:w<cr>
" Let 0 go to beginning of non whitespace
nnoremap 0 ^
" Shift Q quits without saving
nnoremap Q ZZ
" Lets :Q be the same as :q
command! Q q

nmap <Leader>n [m
nmap <Leader>nn [m

map <leader>e :e <C-R>=expand("%:p:h") . '/'<cr><cr>
map <leader>es :split <C-R>=expand("%:p:h") . '/'<cr><cr>
map <leader>ev :vnew <C-R>=expand("%:p:h") . '/'<cr><cr>
